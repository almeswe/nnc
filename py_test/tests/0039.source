let N: i32;
let t: i32[64];

fn chk(x: i32, y: i32): i32 {
    let i: i32 = 0;
    let r: i32 = 0;

    for (r=(i=0); i < 8; i = i + 1) {
        r = r + t[x + 8*i];
        r = r + t[i + 8*y];
        if ((x+i < 8) & (y+i < 8)) {
            r = r + t[x+i + 8*(y+i)];
        }
        if ((x+i < 8) & (y-i >= 0)) {
            r = r + t[x+i + 8*(y-i)];
        }
        if ((x-i >= 0) & (y+i < 8)) {
            r = r + t[x-i + 8*(y+i)];
        }
        if ((x-i >= 0) & (y-i >= 0)) {
            r = r + t[x-i + 8*(y-i)];
        }
    }
    return r;
}

fn go(n: i32, x: i32, y: i32): i32 {
    if (n == 8) {
        N = N + 1;
        return 0;
    }
    for (; y<8; y = y + 1) {
        for (; x<8; x = x + 1) {
            if (chk(x, y) == 0) {
                t[x + 8*y] = t[x + 8*y] + 1;
                go(n+1, x, y);
                t[x + 8*y] = t[x + 8*y] - 1;
            }
        }
        x = 0;
    }
}

pub fn main(): i32 {
    // t = calloc(64, sizeof(int));
    go(0, 0, 0);
    if (N != 92) {
        return 1;
    }
    return 0;
}