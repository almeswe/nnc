let buf: u8[16];
let stdout: u8 = 1u8;

fn ext write(fd: i32, buf: u8*, size: u32): u32;

fn memset(mem: u8*, val: u8, size: i32) {
    for (let i: u32 = 0; i < size; i = i + 1) {
        mem[i] = val;
    }
}

fn print_num(val: u32) {
    if (val == 0) {
        write(stdout, "0", 1);
    }
    let i: i32 = (i32)lengthof(buf);
    let s: i32 = 0;
    memset(buf, 0u8, i);
    for (; val && i; i = i - 1, val = val / 10, s = s + 1) {
        buf[i] = "0123456789"[val % 10];
    }
    write(stdout, buf+i+1, s);
}

fn println_num(val: u32) {
    print_num(val);
    write(stdout, "\r\n", 2u32);
}

fn println_nums(val1: u32, val2: u32) {
    print_num(val1);
    write(stdout, ", ", 2u32);
    println_num(val2);
}

fn main(): i32 {
    let a: i32 = 12;
    let b: i32 = 34;
    let c: i32 = 56;
    let d: i32 = 78;
    let e: i32 = 0;
    let f: i32 = 1;
    let x: i32 = 0;
    let y: i32 = 0;

    println_num(c + d);
    println_num((y = c + d));
    println_num(e || e && f);
    println_num(e || f && f);
    println_num(e && e || f);
    println_num(e && f || f);
    println_num(a && f | f);
    println_num(a | b ^ c & d);
    println_nums(a == a, a == b);
    println_nums(a != a, a != b);
    println_num(a != b && c != d);
    println_num(a + b * c / f);
    println_num(a + b * c / f);
    println_num((4 << 4));
    println_num((64 >> 4));
    return 0;
}