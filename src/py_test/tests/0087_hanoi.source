//---------------------------------------------------------------
let _io_internal_buf: u8[16];

type enum {
    stdin  = 0u32,
    stdout = 1u32,
    stderr = 2u32
} as _io_stream;

fn ext write(fd: i32, buf: u8*, size: u32): u32;

fn memset(mem: u8*, val: u8, size: i32) {
    for (let i: u32 = 0; i < size; i = i + 1) {
        mem[i] = val;
    }
}

fn print(buf: u8*, size: u32) {
    write(stdout as i32, buf, size);
}

fn print_num(val: u32) {
    if (val == 0) {
        write(stdout as i32, "0", 1);
    }
    let i: i32 = (i32)lengthof(_io_internal_buf);
    let s: i32 = 0;
    memset(_io_internal_buf, 0u8, i);
    for (; val && i; i = i - 1, val = val / 10, s = s + 1) {
        _io_internal_buf[i] = "0123456789"[val % 10];
    }
    write(stdout as i32, _io_internal_buf+i+1, s);
}

fn println_num(val: u32) {
    print_num(val);
    write(stdout as i32, "\r\n", 2u32);
}
//---------------------------------------------------------------

type enum {
    TRUE  = 1,
    FALSE = 0
} as _bool;

///* This is the number of "disks" on tower A initially. Taken to be 64 in the
// * legend. The number of moves required, in general, is 2^N - 1. For N = 64,
// * this is 18,446,744,073,709,551,615 */
type enum {
    N = 4
} as _const;

///* These are the three towers. For example if the state of A is 0,1,3,4, that
// * means that there are three discs on A of sizes 1, 3, and 4. (Think of right
// * as being the "down" direction.) */
let A: i32[N];
let B: i32[N];
let C: i32[N];

fn PrintAll() {
    let i: i32 = 0;
    
    print("A: ", 3u32);
    for (i = 0; i < N; i = i + 1) {
        print(" ", 1u32);
        print_num(A[i]);
        print(" ", 1u32);
    }
    print("\n", 1u32);
 
    print("B: ", 3u32);
    for (i = 0; i < N; i = i + 1) {
        print(" ", 1u32);
        print_num(B[i]);
        print(" ", 1u32);
    }
    print("\n", 1u32);
 
    print("C: ", 3u32);
    for (i = 0; i < N; i = i + 1) {
        print(" ", 1u32);
        print_num(C[i]);
        print(" ", 1u32);
    }
    print("\n", 1u32);
    print("------------------------------------------\n", 43u32);
    return;
}

///* Move the leftmost nonzero element of source to dest, leave behind 0. */
///* Returns the value moved (not used.) */
fn Move(source: i32*, dest: i32*): i32 {
    let i: i32 = 0;
    let j: i32 = 0;

    while (i < N && (source[i]) == 0) {
        i = i + 1;
    }
    while (j < N && (dest[j]) == 0) {
        j = j + 1;
    }

   dest[j-1] = source[i];
   source[i] = 0;
   PrintAll();       ///* Print configuration after each move. */
   return dest[j-1];
}

///* Moves first n nonzero numbers from source to dest using the rules of Hanoi.
//   Calls itself recursively.
//   */
fn Hanoi(n: i32, source: i32*, dest: i32*, spare: i32*) {
    let i: i32;
    if (n == 1) {
        Move(source,dest);
        return;
    }
    Hanoi(n - 1, source, spare, dest);
    Move(source, dest);
    Hanoi(n - 1, spare, dest, source);	
    return;
}

fn main(): i32 {
   let i: i32;

   ///* initialize the towers */
   for (i = 0; i < N; i = i + 1) { A[i]=i+1; }
   for (i = 0; i < N; i = i + 1) { B[i]=0; }
   for (i = 0; i < N; i = i + 1) { C[i]=0; }

   print("Solution of Tower of Hanoi Problem with ", 40u32);
   print_num(N as u32);
   print(" Disks\n\n", 8u32);

   ///* Print the starting state */
   print("Starting state:\n", 16u32);
   PrintAll();
   print("\n\nSubsequent states:\n\n", 22u32);

   ///* Do it! Use A = Source, B = Destination, C = Spare */
   Hanoi(N as i32,A,B,C);

   return 0;
}
